import streamlit as st
import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt
import joblib
import tempfile
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
SR = 16000
N_MFCC = 40

# === –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò ===
model = joblib.load("tractor_model.pkl")
scaler = joblib.load("tractor_scaler.pkl")

# === –§–£–ù–ö–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í ===
def extract_features(file_path):
    y, sr = librosa.load(file_path, sr=SR, mono=True)
    y = y / np.max(np.abs(y))
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=N_MFCC)
    features = np.concatenate([
        np.mean(mfcc, axis=1),
        np.median(mfcc, axis=1),
        np.std(mfcc, axis=1)
    ])
    return features, mfcc, y, sr

# === –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ===
st.set_page_config(page_title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–∞ –ø–æ –∑–≤—É–∫—É", page_icon="üöú", layout="centered")

st.title("üéß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–≤—É–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–∞")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (`.wav` –∏–ª–∏ `.m4a`), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å**, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–±–æ—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è.")

# === –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê ===
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=["wav", "m4a"])

if uploaded_file is not None:
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp_file:
        tmp_file.write(uploaded_file.read())
        temp_path = tmp_file.name

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–ª–µ–µ—Ä
    st.audio(uploaded_file, format='audio/wav')

    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    analyze_button = st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

    if analyze_button:
        try:
            with st.spinner("–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –∑–≤—É–∫–∞... ‚è≥"):
                features, mfcc, y, sr = extract_features(temp_path)
                X_scaled = scaler.transform(features.reshape(1, -1))
                prob = model.predict_proba(X_scaled)[0, 1]
                result = "‚ö†Ô∏è –ê–ù–û–ú–ê–õ–ò–Ø" if prob > 0.5 else "‚úÖ –ù–û–†–ú–ê"

                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                st.metric(label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏", value=f"{prob:.2f}")

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è MFCC
                st.write("–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ MFCC:")
                fig, ax = plt.subplots(figsize=(8, 3))
                librosa.display.specshow(mfcc, sr=sr, x_axis="time")
                plt.colorbar(format="%+2.0f dB")
                plt.title("MFCC (–º–µ–ª-—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)")
                st.pyplot(fig)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
