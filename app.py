import streamlit as st
import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt
import torch
import joblib
import io
import os
from pydub import AudioSegment
from panns_inference import AudioTagging

# ======================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ======================
SR = 16000
MAX_SEC = 6.0
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"

MODEL_DIR = "models"
LR_PATH = f"{MODEL_DIR}/panns_lr.joblib"
XGB_PATH = f"{MODEL_DIR}/panns_xgb.joblib"
SCALER_PATH = f"{MODEL_DIR}/panns_scaler.joblib"

# ======================
# –ê–£–î–ò–û –ó–ê–ì–†–£–ó–ö–ê
# ======================
def load_any_audio(file_bytes, sr=SR):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ (wav, mp3, m4a, flac) ‚Üí np.float32 [-1, 1]."""
    try:
        y, _ = librosa.load(io.BytesIO(file_bytes), sr=sr, mono=True)
        return y.astype(np.float32)
    except Exception:
        try:
            audio = AudioSegment.from_file(io.BytesIO(file_bytes))
            audio = audio.set_frame_rate(sr).set_channels(1)
            samples = np.array(audio.get_array_of_samples()).astype(np.float32)
            if samples.dtype.kind in ("i", "u"):
                maxval = np.iinfo(samples.dtype).max
                samples = samples / (maxval + 1e-9)
            samples = samples / (np.max(np.abs(samples)) + 1e-9)
            return samples
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

# ======================
# PANNs –≠–ú–ë–ï–î–î–ò–ù–ì–ò
# ======================
@st.cache_resource
def load_panns():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å PANNs (AudioTagging)."""
    return AudioTagging(checkpoint_path=None, device=DEVICE)

def extract_panns_embedding(model, y):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ PANNs (–≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)."""
    with torch.no_grad():
        out = model.inference(torch.tensor(y[None, :]).to(DEVICE))
    if isinstance(out, dict):
        emb = out.get("embedding", out.get("clipwise_output", None))
    elif isinstance(out, (tuple, list)):
        emb = out[1] if len(out) > 1 else out[0]
    else:
        emb = out
    if hasattr(emb, "detach"):
        emb = emb.detach().cpu().numpy()
    emb = np.squeeze(np.array(emb))
    return emb

# ======================
# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
# ======================
def plot_spectrogram(y, sr=SR, title="Log-Mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞"):
    """–†–∏—Å—É–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É."""
    mel = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128, n_fft=1024, hop_length=256, power=2.0)
    logmel = librosa.power_to_db(mel, ref=np.max)
    fig, ax = plt.subplots(figsize=(12, 4))
    img = librosa.display.specshow(logmel, sr=sr, hop_length=256, x_axis="time", y_axis="mel", ax=ax, cmap='viridis')
    ax.set(title=title)
    ax.set_facecolor('#0E1117')
    fig.patch.set_facecolor('#0E1117')
    ax.tick_params(colors='white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')
    fig.colorbar(img, ax=ax, format="%+2.f dB")
    plt.tight_layout()
    st.pyplot(fig)

# ======================
# –°–¢–ò–õ–ò CSS
# ======================
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 1.5rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .main-header h1 {
        color: white;
        font-size: 2.5rem;
        margin: 0;
        font-weight: 700;
    }
    .info-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #667eea;
        margin: 1rem 0;
    }
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        margin: 1rem 0;
    }
    .result-success {
        background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .result-error {
        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .result-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #2d3748;
    }
    .stButton > button {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 10px;
        transition: all 0.3s;
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(102, 126, 234, 0.4);
    }
    .upload-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 15px;
        border: 2px dashed #667eea;
        text-align: center;
        margin: 2rem 0;
    }
    div[data-testid="stFileUploader"] {
        background: white;
        padding: 1rem;
        border-radius: 10px;
    }
    .feature-badge {
        display: inline-block;
        background: #667eea;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        margin: 0.3rem;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

# ======================
# –ò–ù–¢–ï–†–§–ï–ô–°
# ======================
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∑–≤—É–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–∞ | AI Diagnostics",
    page_icon="üöú",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üöú –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–∞ —Ç—Ä–∞–∫—Ç–æ—Ä–∞</h1>
    <p style="color: white; margin: 0; font-size: 1.1rem;">–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏</p>
</div>
""", unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.image("https://cdn-icons-png.flaticon.com/512/2917/2917995.png", width=100)
    st.markdown("## üìä –û —Å–∏—Å—Ç–µ–º–µ")
    st.markdown("""
    –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–∫—Ç–æ—Ä–∞.
    
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–∞–±–æ—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    - –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –∑–≤—É–∫–∞
    - –î–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ML –Ω–∞ –≤—ã–±–æ—Ä
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - WAV, MP3, M4A, FLAC
    """)
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.info(f"""
    **–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏:** {SR} Hz  
    **–ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {MAX_SEC} —Å–µ–∫  
    **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {DEVICE.upper()}
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
st.markdown("""
<div class="info-card">
    <h3 style="margin-top: 0;">üéØ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h3>
    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—å—é —Ä–∞–±–æ—Ç—ã —Ç—Ä–∞–∫—Ç–æ—Ä–∞. –ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ <strong>PANNs (Pretrained Audio Neural Networks)</strong> 
    –∏–∑–≤–ª–µ—á–µ—Ç –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∑–≤—É–∫.</p>
    <div>
        <span class="feature-badge">‚úÖ –ò—Å–ø—Ä–∞–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞</span>
        <span class="feature-badge">üö® –ê–Ω–æ–º–∞–ª–∏—è/–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å</span>
    </div>
</div>
""", unsafe_allow_html=True)

# –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
uploaded = st.file_uploader(
    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
    type=["wav", "mp3", "m4a", "flac"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, M4A, FLAC"
)

if not uploaded:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    st.stop()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
with st.spinner('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...'):
    file_bytes = uploaded.read()
    try:
        y = load_any_audio(file_bytes, sr=SR)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üìÑ –ò–º—è —Ñ–∞–π–ª–∞", uploaded.name)
with col2:
    st.metric("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{len(y)/SR:.2f} —Å–µ–∫")
with col3:
    st.metric("üíæ –†–∞–∑–º–µ—Ä", f"{len(file_bytes)/1024:.1f} KB")

st.markdown("---")

# –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä
st.markdown("### üîä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ")
st.audio(uploaded)

# –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã")
with st.spinner('üé® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã...'):
    plot_spectrogram(y, sr=SR, title="Log-Mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ –∞—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª–∞")

st.markdown("---")

# ======================
# –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ï–ô
# ======================
available_models = {}
if os.path.exists(LR_PATH):
    available_models["Logistic Regression (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"] = joblib.load(LR_PATH)
if os.path.exists(XGB_PATH):
    available_models["XGBoost"] = joblib.load(XGB_PATH)

if not available_models:
    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ –ø–∞–ø–∫–µ /models (–æ–∂–∏–¥–∞—é—Ç—Å—è panns_lr.joblib –∏–ª–∏ panns_xgb.joblib).")
    st.stop()

try:
    scaler = joblib.load(SCALER_PATH)
except FileNotFoundError:
    st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: models/panns_scaler.joblib")
    st.stop()

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
st.markdown("### ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
model_choice = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
    list(available_models.keys()),
    index=0,
    help="Logistic Regression - –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è. XGBoost - –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç–æ—á–Ω–µ–µ."
)
clf = available_models[model_choice]

with st.spinner('‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ PANNs...'):
    panns_model = load_panns()

# ======================
# –ê–ù–ê–õ–ò–ó
# ======================
st.markdown("---")
if st.button("üîç –ó–ê–ü–£–°–¢–ò–¢–¨ –ê–ù–ê–õ–ò–ó", use_container_width=True):
    with st.spinner('üß† –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'):
        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        y_truncated = y[:int(SR * MAX_SEC)]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ PANNs
        emb = extract_panns_embedding(panns_model, y_truncated)
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        X = scaler.transform([emb])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        if hasattr(clf, "predict_proba"):
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç predict_proba (–Ω–∞–ø—Ä–∏–º–µ—Ä, LogisticRegression, XGBClassifier —Å objective='binary:logistic')
            proba = clf.predict_proba(X)[0]
            prob = proba[1] if len(proba) == 2 else proba[0]
            pred = int(prob > 0.5)
        else:
            # –ï—Å–ª–∏ predict_proba –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º predict
            pred = int(clf.predict(X)[0])
            # –î–ª—è XGBoost –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å predict —Å output_margin
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å raw scores –¥–ª—è XGBoost
                if hasattr(clf, 'predict') and 'XGB' in model_choice:
                    import xgboost as xgb
                    # –ï—Å–ª–∏ —ç—Ç–æ XGBoost, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ DMatrix
                    if isinstance(clf, xgb.XGBClassifier):
                        prob = clf.predict_proba(X)[0][1]
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Booster
                        dmatrix = xgb.DMatrix(X)
                        prob = clf.predict(dmatrix)[0]
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–≥–º–æ–∏–¥—É –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                        prob = 1 / (1 + np.exp(-prob))
                else:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                    prob = 0.99 if pred == 1 else 0.01
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞–π–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç –º–æ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.")
                prob = 0.95 if pred == 1 else 0.05
    
    st.markdown("---")
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if pred == 1:
        st.markdown(f"""
        <div class="result-error">
            <div class="result-title">üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ê–ù–û–ú–ê–õ–ò–Ø</div>
            <p style="font-size: 1.2rem; color: #2d3748;">–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—Ç–µ —Ç—Ä–∞–∫—Ç–æ—Ä–∞</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="result-success">
            <div class="result-title">‚úÖ –¢–†–ê–ö–¢–û–† –ò–°–ü–†–ê–í–ï–ù</div>
            <p style="font-size: 1.2rem; color: #2d3748;">–ê—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric(
            "üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏",
            f"{prob:.1%}",
            delta=f"{(prob - 0.5)*100:.1f}% –æ—Ç –ø–æ—Ä–æ–≥–∞" if prob != 0.5 else "–ù–∞ –ø–æ—Ä–æ–≥–µ"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("ü§ñ –ú–æ–¥–µ–ª—å", model_choice.split()[0])
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("‚öñÔ∏è –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", "50%")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫ float –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [0,1]
    try:
        prob = float(np.squeeze(prob))
    except Exception:
        prob = 0.0  # fallback

    prob = max(0.0, min(1.0, prob))  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

    # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    if prob < 0.3:
        color = "green"
        status = "–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"
    elif prob < 0.5:
        color = "yellow"
        status = "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"
    elif prob < 0.7:
        color = "orange"
        status = "–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"
    else:
        color = "red"
        status = "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏"

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    prog_col1, prog_col2 = st.columns([3, 1])
    with prog_col1:
        st.progress(prob)
    with prog_col2:
        st.caption(f"**{status}**")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidence = abs(prob - 0.5) * 2  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
    st.info(f"üí° **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {confidence:.1%} | **–ö–ª–∞—Å—Å:** {'–ê–Ω–æ–º–∞–ª–∏—è' if pred == 1 else '–ù–æ—Ä–º–∞'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    if pred == 1:
        if prob > 0.7:
            st.error("""
            **‚ö†Ô∏è –°–†–û–ß–ù–û! –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏:**
            - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é —Ç—Ä–∞–∫—Ç–æ—Ä–∞
            - –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–≤–∏–≥–∞—Ç–µ–ª—è
            - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –∏ —Å–º–∞–∑–∫–∏
            - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –º–µ—Ö–∞–Ω–∏–∫—É
            """)
        else:
            st.warning("""
            **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É:**
            - –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–∫—Ç–æ—Ä–∞
            - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ –∏ –¥—Ä—É–≥–∏—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π
            - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            - –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –¥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            """)
    else:
        if prob < 0.2:
            st.success("""
            **–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            - –ó–≤—É–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
            - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
            - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            """)
        else:
            st.success("""
            **–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            - –ó–≤—É–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
            - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
            - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            """)
    
    # Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –≤ production)
    with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.write(f"- –ú–æ–¥–µ–ª—å: {type(clf).__name__}")
        st.write(f"- –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {emb.shape}")
        st.write(f"- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {pred}")
        st.write(f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏: {prob:.4f}")
        st.write(f"- –ò–º–µ–µ—Ç predict_proba: {hasattr(clf, 'predict_proba')}")